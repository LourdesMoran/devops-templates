AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambda for Ingestion of Data from SQS into something else.

Parameters:
  Env:
    Description: The environment name used in named conventions
    Type: String
    MinLength: 1
    MaxLength: 10
    AllowedPattern: '[0-9a-z-]*'
    ConstraintDescription: alpha-numeric string with dashes 1-10 characters in length

  Title:
    Description: Project title
    Type: String
    Default: Replace me with a real title

Resources:
  StatsdSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'For talking to statsd'
      VpcId:
        Fn::ImportValue: !Sub '${Env}-vpc'
      Tags:
        - Key: 'Name'
          Value: !Sub '${Env}-stats-${Title}'

  StatsEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      CidrIp: 10.40.0.0/16
      Description: 'API to statsd'
      IpProtocol: udp
      FromPort: 8125
      ToPort: 8125
      GroupId: !Ref StatsdSG

  MyLambdaeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Env}-${Title}-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${Env}-${Title}-kms
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                Resource: '*'
        - PolicyName: cluster-sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:GetQueueUrl'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:DeleteMessageBatch'
                  - 'sqs:ListDeadLetterSourceQueues'
                  - 'sqs:ListQueueTags'
                Resource:
                  - Fn::ImportValue: !Sub ${Env}-${Title}-queue-arn
                  - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Env}-${Title}

  MyLambdaKmsKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: KMS key for encrypting secrets for Mylambda
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub ${Env}/${Title}-kms-key
        Statement:
          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: "Allow builders (CI-CD) to encrypt secrets"
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - arn:aws:iam::936783871914:role/CI-CD
                - arn:aws:iam::936783871914:user/CI-CD
            Action:
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource: "*"
          - Sid: "Allow use of the key by the lambda"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !GetAtt MyLambdaeRole.Arn
            Action:
              - "kms:Decrypt"
              - "kms:DescribeKey"
            Resource: "*"

  MyLambdaKmsKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub alias/${Env}/${Title}
      TargetKeyId: !Ref MyLambdaKmsKey

  MyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.lambda_handler
      CodeUri: ../../src/
      Runtime: python3.7
      Description: Bridge between SQS and something else
      Environment:
        Variables:
          S3_BUCKET: !Sub ${Env}-deployment
          LOGLEVEL: "warning"
      FunctionName: !Sub ${Env}-${Title}
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${Env}-${Title}-role
      KmsKeyArn: !GetAtt MyLambdaKmsKey.Arn
      MemorySize: 128
      Timeout: 200
      VpcConfig:
        SecurityGroupIds:
          - !Ref StatsdSG
        SubnetIds:
          - Fn::ImportValue: !Sub ${Env}-vpc-subnet-private1
          - Fn::ImportValue: !Sub ${Env}-vpc-subnet-private3
      Events:
        SQSEventMyEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::ImportValue: !Sub ${Env}-${Title}-queue-arn
            BatchSize: 10

Outputs:
  MyLambdaArn:
    Description: lambda ARN
    Value: !Ref MyLambda

  MyLambdaKmsKeyArn:
    Description: The arn of the Lambda KMS Key
    Value: !GetAtt MyLambdaKmsKey.Arn
    Export:
      Name: !Sub '${Env}-${Title}-kms-key-arn'
